// vim: ft=javascript
// Processed by ant.

this.EXPORTED_SYMBOLS = ["ListIt"];

var addons = @addons@,
    scripts = @scripts@;

// Imports
Components.utils.import("resource://gre/modules/Services.jsm");
var appShellService = Components.classes["@mozilla.org/appshell/appShellService;1"]
                      .getService(Components.interfaces.nsIAppShellService),
    systemPrincipal = Components.classes["@mozilla.org/systemprincipal;1"]
                      .createInstance(Components.interfaces.nsIPrincipal);

// Get the hidden window
var window = appShellService.hiddenDOMWindow;

// In case the iframe wasn't properly unloaded, unload it.
var frame = window.document.getElementById("listitBackgroundPage");
if (frame) {
  window.document.documentElement.removeChild(frame);
}
frame = window.document.createElement('iframe');
frame.setAttribute("class", "listit");
frame.setAttribute("id", "listitBackgroundPage");
window.document.documentElement.appendChild(frame);

// Make Context
var XHRConstructor = function() {
  return Components.classes["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance();
}

var ctx = Components.utils.Sandbox(systemPrincipal, {
  wantXray: false,
  sandboxPrototype: frame.contentWindow,
  sandboxName: "listit-background",
  wantComponents: false,
  wantXHRConstructor: false
});

// Load addons
ctx.ListItAddons = {};
ctx.XMLHttpRequest = XHRConstructor;

for (var i = 0; i < addons.length; i++) {
    Components.utils.import(addons[i], ctx.ListItAddons);
}

// Load scripts
for (var i = 0; i < scripts.length; i++) {
    Services.scriptloader.loadSubScript(scripts[i], ctx, 'UTF-8');
}

// Extract listit
var ListIt = ctx.ListIt;

// Destroy the listit backend.
ListIt.destroy = function() {
  try {
    Components.utils.nukeSandbox(ctx);
  } catch (e) { Components.utils.reportError(e); }
  try {
    window.document.documentElement.removeChild(frame);
  } catch (e) { Components.utils.reportError(e); }
  for (var i = 0; i < addons.length; i++) {
    try {
      Components.utils.unload(addons[i]);
    } catch (e) { Components.utils.reportError(e); }
  }
};
